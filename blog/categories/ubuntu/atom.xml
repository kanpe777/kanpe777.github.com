<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ubuntu | kanlog]]></title>
  <link href="http://kanpe777.github.io/blog/categories/ubuntu/atom.xml" rel="self"/>
  <link href="http://kanpe777.github.io/"/>
  <updated>2014-01-25T12:42:39+09:00</updated>
  <id>http://kanpe777.github.io/</id>
  <author>
    <name><![CDATA[kanpe777]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[UbuntuにてRoRのインストールからJenkinsの利用まで]]></title>
    <link href="http://kanpe777.github.io/blog/2014/01/22/first-using-ror-and-jenkins/"/>
    <updated>2014-01-22T12:53:00+09:00</updated>
    <id>http://kanpe777.github.io/blog/2014/01/22/first-using-ror-and-jenkins</id>
    <content type="html"><![CDATA[<p>参考のやつをそのまま試した備忘log</p>

<h2>環境</h2>

<ul>
<li>Ubuntu 12.04 amd64</li>
<li>rbenv 0.4.0</li>
<li>Ruby 2.0.0</li>
<li>Ruby on Rails 4</li>
</ul>


<h3>必要な物をapt-get</h3>

<p><code>
$ sudo apt-get install build-essential git curl zlib1g-dev libssl-dev libreadline-dev libyaml-dev libxml2-dev libxslt-dev sqlite3 libsqlite3-dev nodejs
</code></p>

<h3>rbenv(0.4.0)</h3>

<p><code>
$ git clone git://github.com/sstephenson/rbenv.git .rbenv
$ echo 'export PATH="$HOME/.rbenv/bin:$PATH"' &gt;&gt; ~/.bashrc
$ echo 'eval "$(rbenv init -)"' &gt;&gt; ~/.bashrc
$ exec $SHELL
</code></p>

<h3>ruby-build</h3>

<p><code>
$ mkdir -p ~/.rbenv/plugins
$ cd ~/.rbenv/plugins
$ git clone git://github.com/sstephenson/ruby-build.git
</code></p>

<h3>Ruby(2.0.0)</h3>

<p><code>
$ rbenv install 2.0.0-p353
$ rbenv rehash
$ rbenv global 2.0.0-p353
</code></p>

<h3>.gemrc</h3>

<p><code>
$ echo "install: --no-rdoc --no-ri" &gt;&gt; ~/.gemrc
$ echo "update: --no-rdoc --no-ri" &gt;&gt; ~/.gemrc
</code></p>

<h3>Bundler</h3>

<p><code>
$ gem update
$ gem install bundler
$ rbenv rehash
</code></p>

<h3>Ruby on Rails(4.0.2)</h3>

<p><code>
$ gem install rails
$ rbenv rehash
</code></p>

<h3>アプリの作成</h3>

<h4>Testなしで作成</h4>

<p><code>
$ rails new circle -T
$ cd circle
</code></p>

<h4>userメンテ画面をscaffold</h4>

<p><code>
$ rails g scaffold user name:string age:integer
</code></p>

<h4>DBの作成 &amp;&amp; テスト用DBの作成</h4>

<p><code>
$ rake db:migrate
$ rake db:test:clone
</code></p>

<h4>rails serveer起動</h4>

<p><code>
$ rails s
</code></p>

<p><a href="http://localhost:3000/">http://localhost:3000/</a> にて確認</p>

<h4>Gemfileに<code>rspec-rails</code>を追記</h4>

<p><code>
$ vim Gemfile
group :development, :test do
  gem 'rspec-rails', '~&gt; 2.0'
end
</code></p>

<h4>Gemの更新</h4>

<p><code>
$ bundle install
</code></p>

<h4>Rspecのセットアップ</h4>

<p><code>
$ rails generate rspec:install
</code></p>

<h4>.rspecの以下のように変更</h4>

<p>```</p>

<h1>変更前</h1>

<p>&mdash;color</p>

<h1>変更後</h1>

<p>&mdash;color &mdash;format documentation
```</p>

<h4>Userモデルに対して、以下のバリデーションの追加</h4>

<p>```
$ vim app/models/user.rb
  validates :name,</p>

<pre><code>:presence =&gt; true,
:length =&gt; {:maximum =&gt; 20}
</code></pre>

<p>  validates :age,</p>

<pre><code>:presence =&gt; true,
:numericality =&gt; {:greater_than_or_equal_to =&gt; 0,
                  :less_than_or_equal_to =&gt; 1000}
</code></pre>

<p>```</p>

<ul>
<li>name : 必須入力 &amp;&amp; 最大文字数が20</li>
<li>age  : 必須入力 &amp;&amp; 範囲が0 &ndash; 1000</li>
</ul>


<h4>UserモデルのTestの記述</h4>

<p><code>
$ mkdir spec/models
$ vim spec/models/user_spec.rb
</code></p>

<p>```</p>

<h1>&ndash;<em>&ndash; coding: utf-8 &ndash;</em>&ndash;</h1>

<p>require &lsquo;spec_helper&rsquo;</p>

<p>describe User do
  context &lsquo;何も入力しなかった場合&rsquo; do</p>

<pre><code>subject{User.new}
it {should_not be_valid}
it{ should have(1).errors_on(:name) }
it{ should have(2).errors_on(:age) }
</code></pre>

<p>  end</p>

<p>  context &lsquo;名前が文字数をオーバーしている場合&rsquo; do</p>

<pre><code>subject{User.new(name: 'aaaaaaaaaabbbbbbbbbbc',age: 10)}
it {should_not be_valid}
it{ should have(1).errors_on(:name) }
it{ should have(0).errors_on(:age) }
</code></pre>

<p>  end</p>

<p>  context &lsquo;年齢が範囲を超えている場合&rsquo; do</p>

<pre><code>subject{User.new(name: 'taro',age: 1001)}
it {should_not be_valid}
it{ should have(0).errors_on(:name) }
it{ should have(1).errors_on(:age) }
</code></pre>

<p>  end</p>

<p>  context &lsquo;正常なデータがセットされた場合&rsquo; do</p>

<pre><code>subject{User.new(name: 'taro',age: 20)}
it {should be_valid}
</code></pre>

<p>  end
end
```</p>

<h4>rspecの実行</h4>

<p><code>
$ bundle exec rspec
...
Finished in 0.08931 seconds
10 examples, 0 failures // &lt;-これがでればok
...
</code></p>

<h4>Gemfileにcapybaraとturnipの追加</h4>

<p><code>
$ vim Gemfile
group :development, :test do
  gem 'rspec-rails', '~&gt; 2.0'
  gem 'capybara' # 追記
  gem 'turnip'   # 追記
end
</code></p>

<h4>Gemの更新</h4>

<p><code>
$ bundle install
</code></p>

<h4>.rspecファイルの修正</h4>

<p>```
$ vim .rspec</p>

<h1>変更前</h1>

<p>&mdash;color &mdash;format documentation</p>

<h1>変更後</h1>

<p>-r turnip/rspec &mdash;color &mdash;format documentation
```</p>

<h4>require の下辺りに追記</h4>

<p>```
Dir.glob(&ldquo;spec/<em>*/</em>steps.rb&rdquo;) { |f| load f, true}</p>

<p>require &lsquo;capybara/dsl&rsquo;
require &lsquo;capybara/rspec&rsquo;
require &lsquo;turnip&rsquo;
require &lsquo;turnip/capybara&rsquo;
```</p>

<h4>featureファイルと、stepファイルを記述</h4>

<p><code>
$ mkdir spec/features
$ vim spec/features/users.feature
$ vim spec/steps/users_steps.rb
</code></p>

<p>spec/features/users.feature の中身
```</p>

<h1>encoding: utf-8</h1>

<h1>language: ja</h1>

<p>機能: ユーザー管理
  ユーザー管理を行いたい。なぜならサークル活動に参加するメンバーを管理する必要があるからだ。</p>

<p>  シナリオ: 一覧画面から新規登録画面に移動する</p>

<pre><code>前提 ユーザー管理の一覧画面を開く
もし "New User" リンクをクリックする
ならば ユーザー管理の新規登録画面が表示される
</code></pre>

<p>  シナリオ: 登録画面で登録すると詳細画面に移動する</p>

<pre><code>前提 ユーザー管理の新規登録画面を開く
もし "Name" に "アリス" と入力する
かつ "Age" に "16" と入力する
かつ "Create User" ボタンをクリックする
ならば ユーザー管理の詳細画面が表示される
</code></pre>

<p>```</p>

<p>spec/steps/users_steps.rbの中身
```</p>

<h1>encoding: utf-8</h1>

<p>step &lsquo;ユーザー管理の一覧画面を開く&rsquo; do
  visit &lsquo;/users&rsquo;
end</p>

<p>step &lsquo;画面を目視&rsquo; do
  save_and_open_page
end</p>

<p>step &lsquo;:name リンクをクリックする&rsquo; do |name|
  first(:link, name).click
end</p>

<p>step &lsquo;:name ボタンをクリックする&rsquo; do |name|
  first(:button, name).click
end</p>

<p>step &lsquo;ユーザー管理の新規登録画面が表示される&rsquo; do
  current_path = URI.parse(current_url).path
  current_path.should == &lsquo;/users/new&rsquo;
end</p>

<p>step &lsquo;ユーザー管理の詳細画面が表示される&rsquo; do
  current_path = URI.parse(current_url).path
  current_path.should == &lsquo;/users/1&rsquo;
end</p>

<p>step &lsquo;ユーザー管理の新規登録画面を開く&rsquo; do
  visit &lsquo;/users/new&rsquo;
end</p>

<p>step &lsquo;:field に :value と入力する&rsquo; do |field, value|
  fill_in(field, :with => value)
end
```</p>

<h4>Turnipを実行</h4>

<p><code>
$ bundle exec rspec spec/features/users.feature
</code></p>

<h4>Gitで管理</h4>

<p><code>
$ git init
$ git config --global color.ui true
$ git config --global user.email "hoge@fuga.com"
$ git config --global user.name "kanpe777"
$ git stage .
$ git commit -m "Initial commit"
</code></p>

<h4>Jenkins側</h4>

<h4>rbenv Pluginのインストール</h4>

<ul>
<li><code>Manage Jenkins</code> &ndash;> <code>Plugin Manager</code></li>
<li><code>Available</code>タブを選択し、<code>RVM Plugin</code>にチェックを入れる</li>
<li><code>Install without restart</code></li>
</ul>


<h4>Git Pluginのインストール</h4>

<ul>
<li><code>Manage Jenkins</code> &ndash;> <code>Plugin Manager</code></li>
<li><code>Available</code>タブを選択し、<code>Git Plugin</code>にチェックを入れる</li>
<li><code>Download now and install after restart</code></li>
<li><code>sudo service jenkins restart</code></li>
</ul>


<h4>ジョブの作成</h4>

<ul>
<li>top</li>
<li><code>New Job</code></li>
<li>Job name に「circle」, <code>Build a free-style software project</code>にチェック</li>
<li><code>OK</code>ボタン</li>
<li>Souce Code Management の欄で<code>Git</code>を選択</li>
<li>Repository URLはcircleがある場所(pwd等で確認可能, 自分の場合は/home/vagrant/circle)</li>
<li>Build Environment欄で<code>rbenv build wrapper</code>にチェック</li>
<li>Implementationに<code>ruby 1.9.3-p429</code>を記述</li>
<li>Build欄でAdd build step, <code>Execute shell</code>
(メモリに注意)</li>
</ul>


<p>Commandの中身
<code>
bundle install
bundle exec rake db:migrate
bundle exec rake db:test:clone
bundle exec rspec
</code></p>

<ul>
<li><code>Apply</code> &ndash;> <code>Save</code></li>
<li>Topにてcircleを選択して、<code>Build Now</code>等でbuild実行</li>
<li>青いマークが成功、赤いマークが失敗</li>
</ul>


<h4>自動実行</h4>

<ul>
<li>circle ジョブを選択し、<code>Configure</code>でジョブの設定へ</li>
<li>Build Triggers欄にて<code>Poll SCM</code>にチェック</li>
<li><code>H/5 * * * *</code>を記述(意味は5分毎にコミットを確認する)</li>
</ul>


<h4>Build Pipelie の可視化</h4>

<ul>
<li>Jobを2つ作成

<h4>1つめ：circle_unit_test</h4></li>
<li>Souce Code Management欄で<code>Git</code>を選択し、リポジトリの場所を指定(自分の場合は/home/vagrant/circle)</li>
<li>Build Triggers欄で<code>Poll SCM</code>を選択し、<code>H/5 * * * *</code>を記述</li>
<li>Build 欄で<code>Add build step</code>より、<code>execute shell</code>を選択し、Commandに以下を記述</li>
</ul>


<p>Commandの中身
<code>
bundle install
bundle exec rake db:migrate
bundle exec rake db:test:clone
bundle exec rspec spec/*/*_spec.rb
</code></p>

<ul>
<li>Post-build Actions欄にて<code>Add post-build action</code>より、<code>Trigger parameterized build on other projects</code>を選択</li>
<li>Projects to build 欄に<code>circle_integration_test</code>と記述(事前にcircle_integration_testジョブを作成必要あり)</li>
<li></li>
</ul>


<h2>参考</h2>

<p><a href="http://www.d-wood.com/blog/2013/09/25_4699.html">[Ruby on Rails] Ubuntu に rbenv + Bundler で Rails 4 をインストールする</a></p>

<p><a href="http://www.buildinsider.net/enterprise/jenkins/02">Jenkinsで小さなテストを実行してみよう（Mac OS X＆Linux）</a></p>

<p><a href="http://www.buildinsider.net/enterprise/jenkins/03">アプリケーションをデプロイしてみよう（Mac OS X＆Linux）</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vagrant上でUbuntu 12.04インストールからJenkinsを動かすまで]]></title>
    <link href="http://kanpe777.github.io/blog/2014/01/22/install-jenkins-on-ubuntu/"/>
    <updated>2014-01-22T10:50:00+09:00</updated>
    <id>http://kanpe777.github.io/blog/2014/01/22/install-jenkins-on-ubuntu</id>
    <content type="html"><![CDATA[<h2>環境</h2>

<ul>
<li>Ubuntu 12.04 amd64</li>
<li>Vagrant 1.4.3</li>
<li>Virtual Box 4.3.6</li>
</ul>


<h3>Ubuntuのインストールからsshまで</h3>

<p><code>
$ mkdir ubuntu &amp;&amp; cd ubuntu
$ vagrant box add ubuntu_12_amd64_jenkins http://cloud-images.ubuntu.com/vagrant/precise/current/precise-server-cloudimg-amd64-vagrant-disk1.box
$ vagrant init ubuntu_12_amd64_jenkins
$ vagrant up
$ vagrant ssh
</code></p>

<p><a href="http://pkg.jenkins-ci.org/debian/">Jenkins Debian packages</a>を見ながら&hellip;</p>

<h3>Jenkinsのインストール</h3>

<h4>key</h4>

<p><code>
$ wget -q -O - http://pkg.jenkins-ci.org/debian/jenkins-ci.org.key | sudo apt-key add -
</code></p>

<h4>/etc/apt/source.listに指定された文字列を記述</h4>

<p><code>
$ sudo vim /etc/apt/sources.list.d/jenkins.list
以下を記述
deb http://pkg.jenkins-ci.org/debian binary/
</code></p>

<h4>Jenkinsのインストール</h4>

<p><code>
$ sudo apt-get update
$ sudo apt-get install jenkins
</code></p>

<h4>ポートフォワーディング 8080</h4>

<p>1度ホスト側でVagrantfileに記述
<code>
$ vim Vagrantfile
config.vm.network :forwarded_port, guest: 8080, host: 8080
</code>
以下が確認できたらok
<code>
$ vagrant reload
...
[default] Forwarding ports...
[default] -- 22 =&gt; 2222 (adapter 1)
[default] -- 8080 =&gt; 8080 (adapter 1)
[default] Booting VM...
...
</code></p>

<h4>Untuntu側でjenkinsを起動</h4>

<p><code>
$ sudo service jenkins start
</code></p>

<h4>ホスト側で <a href="http://localhost:8080/">http://localhost:8080/</a> にアクセス</h4>

<p><img src="/images/myimages/jenkinsstart.png" alt="hoge" /></p>
]]></content>
  </entry>
  
</feed>
