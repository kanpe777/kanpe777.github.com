<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: centos | kanlog]]></title>
  <link href="http://kanpe777.github.io/blog/categories/centos/atom.xml" rel="self"/>
  <link href="http://kanpe777.github.io/"/>
  <updated>2014-02-09T14:50:19+09:00</updated>
  <id>http://kanpe777.github.io/</id>
  <author>
    <name><![CDATA[kanpe777]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[PostgreSQLを使ったRoRをGitHubからJenkinsを通してHerokuまで]]></title>
    <link href="http://kanpe777.github.io/blog/2014/01/31/play-ror-and-jenkins-on-centos/"/>
    <updated>2014-01-31T14:56:00+09:00</updated>
    <id>http://kanpe777.github.io/blog/2014/01/31/play-ror-and-jenkins-on-centos</id>
    <content type="html"><![CDATA[<p><a href="http://kanpe777.github.io/blog/2014/01/22/first-using-ror-and-jenkins/">参考をそのまま試した備忘ログ</a> のCentOS and PostgreSQLを使用版</p>

<p>JenkinsもVPS上にやってるので最終的にはHerokuへの自動デプロイまでやったことの流れ
(ついでに勉強したことのノート)</p>

<h2>環境</h2>

<ul>
<li>CentOS 6.5</li>
<li>ruby 2.0.0dev</li>
<li>rails 4.0.2</li>
<li>postgreSQL 9.3</li>
</ul>


<p>以上の環境が既に整ってることが前提</p>

<h2>1. アプリの作成</h2>

<h3>1.1 rails new</h3>

<p><code>
$ rails new my_circle --database=postgresql --skip-test-unit --skip-bundle
</code></p>

<h4>Note : <code>--database=postgresql</code> == <code>-d postgresql</code></h4>

<blockquote><p>&mdash;database=postgresqlオプションを入れた時と入れない時の違いは結構あるので注意</p>

<p><a href="http://qa.atmarkit.co.jp/q/2970">rails new project -d postgresql を指定した時に変更される部位</a></p></blockquote>

<h4>Note : <code>--skip-test-unit</code> == <code>-T</code></h4>

<blockquote><p>標準だとTest::Unitというテスティングフレームワークが使用される(RSpecを使用したい)</p></blockquote>

<h4>Note : <code>--skip-bundle</code></h4>

<blockquote><p><code>bundle install</code>を行わない</p>

<p>どうせあとでちょっといじってまたbundle installする</p></blockquote>

<h4>そのままだと &lsquo;autodetect&rsquo;: Could not find a JavaScript runtime. See <a href="https://github.com/sstephenson/execjs">https://github.com/sstephenson/execjs</a> for a list of available runtimes. (ExecJS::RuntimeUnavailable) と出る</h4>

<p>```
$ vim Gemfile</p>

<p>Before</p>

<h1>gem &lsquo;therubyracer&rsquo;, :platforms => :ruby</h1>

<p>After
gem &lsquo;therubyracer&rsquo;, :platforms => :ruby</p>

<p>$ bundle install
```</p>

<h3>1.1 postgresの方でuserとDBの作成</h3>

<p><code>
$ createuser my_circle -s
$ createdb my_circle_development -O my_circle
</code></p>

<h4><code>createuser</code> の -s/-Sオプション</h4>

<blockquote><p>スーパーユーザとして追加される</p></blockquote>

<h4><code>createdb</code> の -Oオプション</h4>

<blockquote><p>新しいDBの所有者となるDBUserを指定</p></blockquote>

<h3>1.2 userメンテ画面をscaffold機能を使用して作成</h3>

<p><code>
$ rails g scaffold user name:string age:integer
</code></p>

<h3>1.3 DBの作成 &amp; テスト用DBの作成</h3>

<p><code>
$ rake db:migrate
$ rake db:test:clone
</code></p>

<h3>1.4 確認</h3>

<p><code>
$ rails s
</code></p>

<p><a href="localhost:3000/users">localhost:3000/users</a></p>

<ul>
<li>rails s -pXXXX でポート番号を指定可能</li>
</ul>


<h2>2. RSpecのセットアップ</h2>

<p>```
$ vim Gemfile</p>

<h1>以下を追記</h1>

<p>group :development, :test do
  gem &lsquo;rspec-rails&rsquo;, &lsquo;~> 2.0&rsquo;
end</p>

<p>```</p>

<p><code>
$ bundle install
$ rails generate rspec:install
</code></p>

<h4>rails generate rspec:install</h4>

<blockquote><p>RSpecをセットアップするためのコマンド</p>

<p>これで、プロジェクトディレクトリの下にspecディレクトリができたのが確認可能(他には.spec等)</p></blockquote>

<h3>2.1 RSpecの出力フォーマットをドキュメント形式に変更</h3>

<p>```
$ vim .rspec</p>

<p>Before
&mdash;color</p>

<p>After
&mdash;color &mdash;format documentation
```</p>

<h2>3. アプリケーションの修正とユニットテストの作成</h2>

<h3>3.1 Userモデルに対してバリデーションの追加</h3>

<p>```
$ vim app/models/user.rb</p>

<h1>必須入力 &amp;&amp; 最大文字数が20</h1>

<p>  validates :name,</p>

<pre><code>:presence =&gt; true,
:length =&gt; {:maximum =&gt; 20}
</code></pre>

<h1>必須入力 &amp;&amp; 入力値が0 &ndash; 1000の間</h1>

<p>  validates :age,</p>

<pre><code>:presence =&gt; true,
:numericality =&gt; {:greater_than_or_equal_to =&gt; 0,
:less_than_or_equal_to =&gt; 1000}
</code></pre>

<p>```</p>

<h3>3.2 バリデーションをテストするコード</h3>

<p>```
$ mkdir spec/models
$ vim spec/models/user_spec.rb</p>

<h1>&ndash;<em>&ndash; coding: utf-8 &ndash;</em>&ndash;</h1>

<p>require &lsquo;spec_helper&rsquo;</p>

<p>describe User do
  context &lsquo;何も入力しなかった場合&rsquo; do</p>

<pre><code>subject{User.new}
it { should_not be_valid }
it { should have(1).errors_on(:name) }
it { should have(2).errors_on(:age) }
</code></pre>

<p>  end</p>

<p>  context &lsquo;名前が文字数をオーバーしている場合&rsquo; do</p>

<pre><code>subject{User.new(name: 'aaaaaaaaaabbbbbbbbbbc',age: 10)}
it { should_not be_valid }
it { should have(1).errors_on(:name) }
it { should have(0).errors_on(:age) }
</code></pre>

<p>  end</p>

<p>  context &lsquo;年齢が範囲を超えている場合&rsquo; do</p>

<pre><code>subject{User.new(name: 'taro',age: 1001)}
it {should_not be_valid}
it{ should have(0).errors_on(:name) }
it{ should have(1).errors_on(:age) }
</code></pre>

<p>  end</p>

<p>  context &lsquo;正常なデータがセットされた場合&rsquo; do</p>

<pre><code>subject{User.new(name: 'taro',age: 20)}
it {should be_valid}
</code></pre>

<p>  end
end</p>

<p>```</p>

<h4>ブラウザでも確認可能</h4>

<ul>
<li>何も入力しないでuserを追加しようとすると怒られる</li>
</ul>


<h3>3.3 テストの実行</h3>

<p>```
$ bundle exec rspec
(以下のような結果がでるはず)</p>

<p>User
  正常なデータがセットされた場合</p>

<pre><code>should be valid
</code></pre>

<p>  名前が文字数をオーバーしている場合
[deprecated] I18n.enforce_available_locales will default to true in the future. If you really want to skip validation of your locale you can set I18n.enforce_available_locales = false to avoid this message.</p>

<pre><code>should not be valid
should have 1 errors on :name
should have 0 errors on :age
</code></pre>

<p>  年齢が範囲を超えている場合</p>

<pre><code>should not be valid
should have 0 errors on :name
should have 1 errors on :age
</code></pre>

<p>  何も入力しなかった場合</p>

<pre><code>should not be valid
should have 1 errors on :name
should have 2 errors on :age
</code></pre>

<p>Finished in 0.1475 seconds
10 examples, 0 failures</p>

<p>Randomized with seed 15644</p>

<p>```</p>

<h2>4. インテグレーションテストの作成</h2>

<h3>4.1 GemfileにRSpecをGherkin(ガーキン)記法で書けるようなgemを記述(turnip)</h3>

<p>```
$ vim Gefile</p>

<p>&hellip;
group :development, :test do
  gem &lsquo;rspec-rails&rsquo;, &lsquo;~> 2.0&rsquo;
  gem &lsquo;capybara&rsquo;
  gem &lsquo;turnip&rsquo;
end</p>

<p>```</p>

<h4>capybara</h4>

<blockquote><p>仮想的なwebブラウザでテストを行うために必要</p></blockquote>

<h4>turnip</h4>

<blockquote><p>gherkin記法でRSpecを書くことが可能なフレームワーク</p></blockquote>

<p>```
$ bundle install
$ vim .rspec</p>

<p>Before
&mdash;color &mdash;format documentation</p>

<p>After
-r turnip/rspec &mdash;color &mdash;format documentation</p>

<p>```</p>

<h3>4.2 Turnipを実行できるようにする</h3>

<p>```
$ vim spec/spec_helper.rb</p>

<p>&hellip;
require &lsquo;rspec/autorun&rsquo;#(この行の下辺りに)</p>

<h1>記述</h1>

<p>Dir.glob(&ldquo;spec/<em>*/</em>steps.rb&rdquo;) { |f| load f, true}</p>

<p>require &lsquo;capybara/dsl&rsquo;
require &lsquo;capybara/rspec&rsquo;
require &lsquo;turnip&rsquo;
require &lsquo;turnip/capybara&rsquo;</p>

<p>&hellip;</p>

<p>```</p>

<h3>4.3 featureファイルとstepファイルの記述</h3>

<p>users.feature
```
$ mkdir spec/feature
$ vim spec/feature/users.feature</p>

<h1>encoding: utf-8</h1>

<h1>language: ja</h1>

<p>機能: ユーザー管理
  ユーザー管理を行いたい。なぜならサークル活動に参加するメンバーを管理する必要があるからだ。</p>

<p>  シナリオ: 一覧画面から新規登録画面に移動する</p>

<pre><code>前提 ユーザー管理の一覧画面を開く
もし "New User" リンクをクリックする
ならば ユーザー管理の新規登録画面が表示される
</code></pre>

<p>  シナリオ: 登録画面で登録すると詳細画面に移動する</p>

<pre><code>前提 ユーザー管理の新規登録画面を開く
もし "Name" に "アリス" と入力する
かつ "Age" に "16" と入力する
かつ "Create User" ボタンをクリックする
ならば ユーザー管理の詳細画面が表示される
</code></pre>

<p>```</p>

<p>users_steps.rb
```
$ mkdir spec/steps/
$ vim spec/steps/users_steps.rb</p>

<h1>encoding: utf-8</h1>

<p>step &lsquo;ユーザー管理の一覧画面を開く&rsquo; do
  visit &lsquo;/users&rsquo;
end</p>

<p>step &lsquo;画面を目視&rsquo; do
  save_and_open_page
end</p>

<p>step &lsquo;:name リンクをクリックする&rsquo; do |name|
  first(:link, name).click
end</p>

<p>step &lsquo;:name ボタンをクリックする&rsquo; do |name|
  first(:button, name).click
end</p>

<p>step &lsquo;ユーザー管理の新規登録画面が表示される&rsquo; do
  current_path = URI.parse(current_url).path
  current_path.should == &lsquo;/users/new&rsquo;
end</p>

<p>step &lsquo;ユーザー管理の詳細画面が表示される&rsquo; do
  current_path = URI.parse(current_url).path
  current_path.should == &lsquo;/users/1&rsquo;
end</p>

<p>step &lsquo;ユーザー管理の新規登録画面を開く&rsquo; do
  visit &lsquo;/users/new&rsquo;
end</p>

<p>step &lsquo;:field に :value と入力する&rsquo; do |field, value|
  fill_in(field, :with => value)
end
```</p>

<h3>4.4 テストの実行</h3>

<p><code>
$ bundle exec rspec
成功するはず
</code></p>

<h4>注意</h4>

<blockquote><p><code>$ rake db:test:clone</code>をしないと失敗する可能性がある</p>

<p>複数回連続では出来ない。多分DBに要素が残りっぱなし</p></blockquote>

<h2>5. Jenkinsでnew Jobを作成</h2>

<p>ここらへんは、前回の記事と一緒</p>

<h3><a href="http://kanpe777.github.io/blog/2014/01/22/first-using-ror-and-jenkins/">参考をそのまま試した備忘ログ</a></h3>

<h3>ネットワーク設定あたりの注意点</h3>

<p>localではつながるが、vps上では色々やらないといけなかった
nginxで動かすので <code>yum install nginx</code>等やって
```
$ vim /etc/nginx/nginx.com</p>

<h2>&mdash; (ry</h2>

<p>http {
  ##&mdash; (ry</p>

<pre><code>  listen 80;
server_name &lt;ホスト名&gt;; 
location {
  proxy_pass http://localhost:80; 
}  
</code></pre>

<p>  }
}
```</p>

<blockquote><p>ssh hoge@&lt;ホスト名></p></blockquote>

<p><code>
$ sudo service nginx restart
</code></p>

<ul>
<li><a href="http://%E3%83%9B%E3%82%B9%E3%83%88%E5%90%8D/jenkins">http://%E3%83%9B%E3%82%B9%E3%83%88%E5%90%8D/jenkins</a> でアクセス可能</li>
</ul>


<h2>6. いざ実行しようとしたら、PostgreSQLの認証で怒られた</h2>

<p>こんな感じ怒られる
<code>
FATAL: Peer authentication failed for user "postgres"
</code></p>

<h3>6.1 解決方法</h3>

<ul>
<li>pg_hba.confをいじる</li>
</ul>


<p>PostgreSQL 9.3 でやってるので自分の環境では
```
$sudo vim /var/lib/pgsql/9.3/data/pg_hba.conf</p>

<h2>変更前</h2>

<h1>&ldquo;local&rdquo; is for Unix domain socket connections only</h1>

<p>local   all             all                                     peer</p>

<h2>変更後</h2>

<h1>&ldquo;local&rdquo; is for Unix domain socket connections only</h1>

<p>local   all             all                                     trust
```</p>

<p><code>
$ sudo service postgresql-9.3 restart
</code></p>

<ul>
<li>md5では失敗したorz</li>
</ul>


<h2>7. Jenkinsでのjob中にてrspecでsyntaxエラー</h2>

<p>3つのテストに分ける段階での、integration_testの方で
<code>
bundle install --path vendor/bundle
bundle exec rake db:migrate
bundle exec rake db:test:clone
bundle exec rspec spec/*/*.feature
</code></p>

<p>ここで以下の様なエラー
```
$ bundle exec rspec spec/<em>/</em>.feature        <br/>
syntax error, unexpected &lsquo;:&rsquo;, expecting end-of-input (SyntaxError)
機能: ユーザー管理</p>

<pre><code>    ^
</code></pre>

<p>```</p>

<h3>7.1 GitHub上に.rpsecファイルがないのが問題</h3>

<p>ローカルなリポジトリにて
```
$ vim .gitignore
.rspecを消す</p>

<p>$ git stage .gitignore
$ git commit -m &ldquo;Fix .gitignore&rdquo;
$ git push
```</p>

<p>.rpsecの中身
<code>
-r turnip/rspec --color --format documentation
</code></p>

<h2>8 Herokuへpushしようとすると激おこ</h2>

<h4>原因:Jenkinsが頭よくて、masterを汚さないよう一時branchでやってる</h4>

<h3>8.1 解決方法</h3>

<p><code>
git checkout -b temp
git push heroku temp:master
git checkout master
git branch -D temp
</code></p>

<p>という風にやる</p>

<p>やっと全部できた</p>

<h2>参考</h2>

<ul>
<li><a href="http://railsdoc.com/rails">Railsドキュメント</a></li>
<li><a href="http://rice-american.github.io/blog/2014/01/27/nginx-jenkins/">さくらVPSにJenkinsとNginxでJenkinsサーバを構築</a></li>
<li><a href="http://www.postgresql.jp/document/9.3/html/auth-pg-hba-conf.html">PostgreSQL 9.3.2文書 第19章 クライアント認証</a></li>
<li><a href="http://stackoverflow.com/questions/18664074/getting-error-peer-authentication-failed-for-user-postgres-when-trying-to-ge">Getting error: Peer authentication failed for user &ldquo;postgres”, when trying to get pgsql working with rails</a></li>
<li><a href="http://rice-american.github.io/blog/2014/02/08/jenkins-rspec/">Bundle Exec Rspec spec/<em>/</em>.featureが失敗する件</a></li>
<li><a href="http://junjiblg.hatenablog.jp/entry/2013/12/06/230803">【Jenkins】JenkinsでHerokuにデプロイすると「Everything up-to-date」と表示される</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
